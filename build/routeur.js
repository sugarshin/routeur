/**
 * Modules in this bundle
 * @license
 * 
 * routeur:
 *   license: MIT
 *   author: sugarshin
 *   version: 0.2.1
 * 
 * ext-regex:
 *   license: MIT
 *   author: Jon Schlinkert
 *   maintainers: jonschlinkert <github@sellside.com>
 *   homepage: https://github.com/regexps/ext-regex
 *   version: 1.0.0
 * 
 * for-in:
 *   license: MIT
 *   author: Jon Schlinkert
 *   maintainers: jonschlinkert <github@sellside.com>
 *   homepage: https://github.com/jonschlinkert/for-in
 *   version: 0.1.4
 * 
 * for-own:
 *   license: MIT
 *   author: Jon Schlinkert
 *   maintainers: jonschlinkert <github@sellside.com>
 *   homepage: https://github.com/jonschlinkert/for-own
 *   version: 0.1.3
 * 
 * glob-to-regexp:
 *   license: BSD
 *   author: Nick Fitzgerald <fitzgen@gmail.com>
 *   maintainers: nickfitzgerald <fitzgen@gmail.com>
 *   homepage: https://github.com/fitzgen/glob-to-regexp
 *   version: 0.1.0
 * 
 * is-extendable:
 *   license: MIT
 *   author: Jon Schlinkert
 *   maintainers: jonschlinkert <github@sellside.com>
 *   homepage: https://github.com/jonschlinkert/is-extendable
 *   version: 0.1.1
 * 
 * object-assign:
 *   license: MIT
 *   author: Sindre Sorhus <sindresorhus@gmail.com>
 *   maintainers: sindresorhus <sindresorhus@gmail.com>
 *   homepage: https://github.com/sindresorhus/object-assign#readme
 *   version: 4.0.1
 * 
 * object.omit:
 *   license: MIT
 *   author: Jon Schlinkert
 *   maintainers: jonschlinkert <github@sellside.com>
 *   homepage: https://github.com/jonschlinkert/object.omit
 *   version: 2.0.0
 * 
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Routeur = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/*!
 * ext-regex <https://github.com/regexps/ext-regex>
 *
 * Copyright (c) 2014 Jon Schlinkert.
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function extRegex() {
  return /(?=\.)(\.([^\\\/.]*))*$/;
};

},{}],2:[function(_dereq_,module,exports){
/*!
 * for-in <https://github.com/jonschlinkert/for-in>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

module.exports = function forIn(o, fn, thisArg) {
  for (var key in o) {
    if (fn.call(thisArg, o[key], key, o) === false) {
      break;
    }
  }
};
},{}],3:[function(_dereq_,module,exports){
/*!
 * for-own <https://github.com/jonschlinkert/for-own>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

var forIn = _dereq_('for-in');
var hasOwn = Object.prototype.hasOwnProperty;

module.exports = function forOwn(o, fn, thisArg) {
  forIn(o, function (val, key) {
    if (hasOwn.call(o, key)) {
      return fn.call(thisArg, o[key], key, o);
    }
  });
};

},{"for-in":2}],4:[function(_dereq_,module,exports){
module.exports = function (glob, opts) {
  if (glob == null) {
    return null;
  }

  var str = String(glob);

  // The regexp we are building, as a string.
  var reStr = "";

  // Whether we are matching so called "extended" globs (like bash) and should
  // support single character matching, matching ranges of characters, group
  // matching, etc.
  var extended = opts ? !!opts.extended : false;

  // If we are doing extended matching, this boolean is true when we are inside
  // a group (eg {*.html,*.js}), and false otherwise.
  var inGroup = false;
  // RegExp flags (eg "i" ) to pass in to RegExp constructor.
  var flags = opts && typeof( opts.flags ) === "string" ? opts.flags : "";
  var c;
  for (var i = 0, len = str.length; i < len; i++) {
    c = str[i];

    switch (c) {
    case "\\":
    case "/":
    case "$":
    case "^":
    case "+":
    case ".":
    case "(":
    case ")":
    case "=":
    case "!":
    case "|":
      reStr += "\\" + c;
      break;

    case "?":
      if (extended) {
        reStr += ".";
	    break;
      }

    case "[":
    case "]":
      if (extended) {
        reStr += c;
	    break;
      }

    case "{":
      if (extended) {
        inGroup = true;
	    reStr += "(";
	    break;
      }

    case "}":
      if (extended) {
        inGroup = false;
	    reStr += ")";
	    break;
      }

    case ",":
      if (inGroup) {
        reStr += "|";
	    break;
      }
      reStr += "\\" + c;
      break;

    case "*":
      reStr += ".*";
      break;

    default:
      reStr += c;
    }
  }

  // When regexp 'g' flag is specified don't
  // constrain the regular expression with ^ & $
  if (!flags || !~flags.indexOf('g')) {
    reStr = "^" + reStr + "$";
  }

  return new RegExp(reStr, flags);
};

},{}],5:[function(_dereq_,module,exports){
/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

module.exports = function isExtendable(val) {
  return typeof val !== 'undefined' && val !== null
    && (typeof val === 'object' || typeof val === 'function');
};

},{}],6:[function(_dereq_,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],7:[function(_dereq_,module,exports){
/*!
 * object.omit <https://github.com/jonschlinkert/object.omit>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

var isObject = _dereq_('is-extendable');
var forOwn = _dereq_('for-own');

module.exports = function omit(obj, keys) {
  if (!isObject(obj)) return {};

  var keys = [].concat.apply([], [].slice.call(arguments, 1));
  var last = keys[keys.length - 1];
  var res = {}, fn;

  if (typeof last === 'function') {
    fn = keys.pop();
  }

  var isFunction = typeof fn === 'function';
  if (!keys.length && !isFunction) {
    return obj;
  }

  forOwn(obj, function (value, key) {
    if (keys.indexOf(key) === -1) {

      if (!isFunction) {
        res[key] = value;
      } else if (fn(value, key, obj)) {
        res[key] = value;
      }
    }
  });
  return res;
};

},{"for-own":3,"is-extendable":5}],8:[function(_dereq_,module,exports){
/*!
 * @license routeur
 * (c) sugarshin
 * License: MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _globToRegexp = _dereq_('glob-to-regexp');

var _globToRegexp2 = _interopRequireDefault(_globToRegexp);

var _objectAssign = _dereq_('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _objectOmit = _dereq_('object.omit');

var _objectOmit2 = _interopRequireDefault(_objectOmit);

var _extRegex = _dereq_('ext-regex');

var _extRegex2 = _interopRequireDefault(_extRegex);

var _utilObjectForEach = _dereq_('./util/objectForEach');

var _utilObjectForEach2 = _interopRequireDefault(_utilObjectForEach);

var _utilIndexRegex = _dereq_('./util/indexRegex');

var _utilIndexRegex2 = _interopRequireDefault(_utilIndexRegex);

var _utilIsString = _dereq_('./util/isString');

var _utilIsString2 = _interopRequireDefault(_utilIsString);

var _utilIsFunction = _dereq_('./util/isFunction');

var _utilIsFunction2 = _interopRequireDefault(_utilIsFunction);

var Routeur = (function () {

  /**
   * constructor
   *
   * @param  {Object} routes = {}
   * @param  {Object} config
   */

  function Routeur(routes, config) {
    if (routes === undefined) routes = {};

    _classCallCheck(this, Routeur);

    this.routes = routes;
    this.config = (0, _objectAssign2['default'])({
      rootPath: ''
    }, config);
  }

  /**
   * run
   *
   * @param  {String} currentPathName = location.pathname || ''
   */

  _createClass(Routeur, [{
    key: 'run',
    value: function run() {
      var _this = this;

      var currentPathName = arguments.length <= 0 || arguments[0] === undefined ? location.pathname || '' : arguments[0];

      (0, _utilObjectForEach2['default'])(this.routes, function (actionOrActions, pathName) {
        var globPath = _this._getGlobPath(_this.config.rootPath, pathName);
        var regexp = (0, _globToRegexp2['default'])(globPath, { extended: true });

        if (regexp.test(currentPathName)) {
          if ((0, _utilIsFunction2['default'])(actionOrActions)) {
            actionOrActions();
          } else if (Array.isArray(actionOrActions)) {
            actionOrActions.forEach(function (action) {
              return action();
            });
          }
        }
      });
    }

    /**
     * configure
     *
     * @param  {Object} config
     * @return {Routeur} this
     */
  }, {
    key: 'configure',
    value: function configure(config) {
      this.config = (0, _objectAssign2['default'])({}, this.config, config);
      return this;
    }

    /**
     * addRoute
     *
     * @param  {String or Object} pathName or route
     * @param  {Function or Functions Array} actionOrActions
     * @return {Routeur} this
     */
  }, {
    key: 'addRoute',
    value: function addRoute(pathName, /* or route object */actionOrActions) {
      if ((0, _utilIsString2['default'])(pathName)) {
        this.routes[pathName] = actionOrActions;
      } else {
        var route = pathName;
        this.routes = (0, _objectAssign2['default'])({}, this.routes, route);
      }
      return this;
    }

    /**
     * removeRoute
     *
     * @param  {String} pathName
     * @return {Routeur} this
     */
  }, {
    key: 'removeRoute',
    value: function removeRoute(pathName) {
      this.routes = (0, _objectOmit2['default'])(this.routes, pathName);
      return this;
    }

    /**
     * _getGlobPath
     *
     * @param  {String} rootPath
     * @param  {String} pathName
     * @return {String} glob
     */
  }, {
    key: '_getGlobPath',
    value: function _getGlobPath(rootPath, pathName) {
      if ((0, _extRegex2['default'])().test(pathName)) {
        return '' + rootPath + pathName;
      }

      if ((0, _utilIndexRegex2['default'])().test(pathName)) {
        return '' + rootPath + pathName + '{,index.html}';
      }

      return '' + rootPath + pathName + '{/,/index.html}';
    }
  }]);

  return Routeur;
})();

exports['default'] = Routeur;
module.exports = exports['default'];

},{"./util/indexRegex":9,"./util/isFunction":10,"./util/isString":11,"./util/objectForEach":12,"ext-regex":1,"glob-to-regexp":4,"object-assign":6,"object.omit":7}],9:[function(_dereq_,module,exports){
/**
 * indexRegex
 *
 * @return  {Regexp}
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = indexRegex;

function indexRegex() {
  return (/\/$/
  );
}

module.exports = exports['default'];

},{}],10:[function(_dereq_,module,exports){
/**
 * isFunction
 *
 * @return  {Boolean}
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = isFunction;
var toString = Object.prototype.toString;

function isFunction(value) {
  return toString.call(value) === '[object Function]';
}

module.exports = exports['default'];

},{}],11:[function(_dereq_,module,exports){
/**
 * isString
 *
 * @return  {Boolean}
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = isString;
var toString = Object.prototype.toString;

function isString(value) {
  return toString.call(value) === '[object String]';
}

module.exports = exports['default'];

},{}],12:[function(_dereq_,module,exports){
(function (global){
/**
 * objectForEach
 *
 * @param  {Object} object
 * @param  {Function} callback
 * @param  {Any} context = global
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = objectForEach;

function objectForEach(object, callback) {
  var context = arguments.length <= 2 || arguments[2] === undefined ? global : arguments[2];

  Object.keys(object).forEach(function (key, i) {
    callback.call(context, object[key], key, i, object);
  });
}

module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[8])(8)
});